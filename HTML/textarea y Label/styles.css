body {
    margin: 0;
    font-family: sans-serif;
    color: #ddd;
    background-color: #222;
}

form {
    background-color: transparent;
    padding: 20px 0;
    max-width: 500px;
    margin: auto;
    box-shadow: 0px 0px 35px #fff2;
    border-radius: 15px;
    margin-top: 50px;
}

h2 {
    text-align: center;
    margin: 0;
    margin-bottom: 10px;
    text-transform: uppercase;
    font-weight: 100;
    font-size: 22px;
    padding: 10px;
}

.form_input{
    padding: 6px 20px ;
    /* border: 2px solid red; */
    
}

input, textarea, select{
    /*Le damos los mismos estilos al textarea*/
    width: 100%;    
    box-sizing: border-box;
    /*Recordar que esto elimina cualquier scroll horizontal que se genere*/
    padding: 6px 8px;
    border: none;
    border: 1px solid #666;
    border-radius: 6px;
    box-shadow: 0px 0px 15px #0001;
    background-color: transparent;
    color: #ddd;
}

option {
    background-color: #222;
    /* A los option, le damos el mismo color de fondo que al body.
    A estos elementos no se les puede modificar ni el padding ni el margin, solo el color y el fondo.*/
}

/*Estilos especificos para el textarea*/
textarea {
    min-width: 100%;
    resize: vertical;
    /*Esto permite que el textarea pueda cambiar de tamaño solo en el eje vertical. Tiene otra propiedad que se llama both, que permite el resize tanto vertical como horizontal. La última opción es NONE en donde no va a permitir que se redimensione el elemento */
    min-height: 100px;
    /*Altura mínima*/
  
    /*Altura máxima*/
    font-family: sans-serif;
    /*El elemento tiene su propia tipografia por defecto, por lo que si queremos que sea igual que el resto, hay que indicarlo entre sus estilos*/
    
    field-sizing: content;
    /*CON ESTA NUEVA PROPIEDAD, EL TAMAÑO DEL ELEMENTO SE VA A REDIMENSIONAR SEGUN EL CONTENIDO. Y SE PUEDE COMBINAR CON ALTURA MINIMA Y MAXIMA. AÚN NO ESTA DISPONIBLE PARA TODOS LOS NAVEGADORES.*/
}

label {
    font-size: 0.9em;
    /*Los labes  son elementos en linea porque lo que no podemos simplemente modificar sus margenes y darle padding.
    Por ejemplo, margin-bottom:10px no funcionaria.
    Una opcion es modificar otros elementos o podemos usar la propiedad line-height. Con eso, logré separar un poco el label del input*/
    line-height: 2;
}

button {
    display: block;
    /*
    La propiedad display: block en CSS define cómo un elemento se comporta en el diseño del documento. Un elemento con display: block tiene las siguientes características principales:

    Características de display: block
    Ocupar toda la línea horizontal disponible:

    Un elemento bloque siempre comienza en una nueva línea y ocupa todo el ancho disponible de su contenedor, a menos que se limite explícitamente su tamaño con propiedades como width.
    Permite definir su tamaño con width y height:

    Puedes ajustar tanto el ancho como la altura del elemento.
    Ejemplos comunes de elementos bloque:

    Por defecto, los elementos como <div>, <p>, <h1>, <section>, y <article> son de tipo bloque.
    Comparación con otros valores de display
    inline:

    Los elementos en línea no comienzan en una nueva línea y solo ocupan el espacio necesario para su contenido. No puedes establecer width o height en ellos.
    Ejemplo: <span>, <a>, <label>.
    inline-block:

    Combina comportamientos de ambos: se comporta como un elemento en línea pero respeta width y height.
    none:

    Elimina el elemento del flujo visual y no ocupa espacio en el documento.
    */
    background-color: transparent;
    color: #ddd;
    padding: 6px;
    margin: auto;
}